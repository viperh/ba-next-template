// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean    @default(false)
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  UserRole      UserRole[]

  @@unique([email])
  @@map("user")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  parentRoleId    String?
  parentRole      Role?            @relation("RoleHierarchy", fields: [parentRoleId], references: [id])
  childRoles      Role[]           @relation("RoleHierarchy")
  users           UserRole[]
  permissions     RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([parentRoleId])
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId String

  assignedAt   DateTime @default(now())
  assignedById String?

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())

  @@index([code])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
